# -*- coding: utf-8 -*-
"""CHAT BOT ECHO NIT -W

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hgWFSAQvDD-FrSSROWkPVdCepYg-CAbt

CHAT BOT USING MACHINE LEARNING (ECHO) FOR SR UNIVERSITY
"""

pip install fuzzywuzzy

pip install boto3

def load_timetable(csv_path):
    timetable_df = pd.read_csv(csv_path)
    return timetable_df

from google.colab import drive
drive.mount('/content/drive')

pip install googlesearch-python

from googlesearch import search

# Define the search query
search_query=input(" ")

# Perform the Google search and get the URLs of search results
search_results = search(search_query)

# Iterate through the search results and print each URL
for url in search_results:
    print("ECHO:", url)



from transformers import pipeline
import pandas as pd
from fuzzywuzzy import process

# Function to load timetable from CSV
def load_timetable(csv_path):
    timetable_df = pd.read_csv(csv_path)
    return timetable_df

# Function to get timetable information based on user query
def get_timetable_info(user_query, timetable_df):
    # Assume that the timetable has columns like 'Day', 'Time', 'Subject', 'Room', etc.
    relevant_columns = ['Time', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']

    # Check if the user's query matches any relevant column in the timetable
    for column in relevant_columns:
        if column.lower() in user_query.lower():
            # Extract relevant information based on the query
            relevant_info = timetable_df[column]
            return relevant_info

    # If no relevant information is found
    return None

# Function to display subjects of ECE from a file
def display_ece_subjects():
    with open("/content/subjects.txt", "r") as file:
        subjects_info = file.read()
        print("Echo:", subjects_info)

# Function to display answers content from a file
def display_answers_content():
    with open("/content/answers_content.txt", "r") as file:
        answers_content_info = file.read()
        print("Echo:", answers_content_info)

# Load timetable from CSV file
timetable_path = "/content/ECEAIML - ECEAIML - ECEAIML - ECEAIML.csv"  # Update with your actual path
timetable_data = load_timetable(timetable_path)

# Initialize question-answering pipeline
qa_model = pipeline("question-answering")

# Dictionary to store user-provided information
user_data = {"name": "Echo"}  # Initial data

# Define context
context = """
who am I? I am {name}. {name} is created by Mujeeb and Navaneeth.
{name} talks about the ECE AIML branch of SR University:
Located near Hasanparthy in Warangal, it's one of the first private universities in the state.
Offers undergraduate, postgraduate, and doctoral programs in various fields like engineering, technology, science, commerce, management, law, and more.
Known for its:
- Industry-relevant curriculum: Focuses on preparing students for professional success with practical learning, workshops, and internship opportunities.
- Entrepreneurial mindset: Encourages innovation and creativity through dedicated centers and programs.
- Strong placements: Achieves over a 90% placement rate with reputed companies.
- State-of-the-art facilities: Includes modern classrooms, labs, libraries, sports complexes, and more.
- NAAC accreditation: Holds an 'A' grade, indicating high academic standards.
-
""".format(name=user_data["name"])

# Begin conversation loop
while True:
    # Get user input
    user_input = input("You: ")

    # Check if the user wants to exit
    if user_input.lower() == 'exit':
        print("ECHO: I am sleepy!")
        break
    if user_input.lower() == 'who created you':
        print("Echo: Mujeeb, Navaneeth, Akhilsh, and Priyavardhan")
        continue

    # Check if the user wants to update information
    if user_input.lower().startswith("your name is "):
        new_name = user_input[len("your name is "):]
        user_data["name"] = new_name
        context = context.replace("{name}", new_name)
        print("ECHO: My actual name is Echo. But if that's what you want, you can call me", new_name)
        continue

    # Check if the user is asking about the timetable
    timetable_info = get_timetable_info(user_input, timetable_data)

    if timetable_info is not None:
        # Print the timetable information
        print("ECHO:", timetable_info)
        continue

    # Check if the user wants to display subjects of ECE
    ece_subjects_phrases = ['subjects of ece', 'tell me the subjects of ece', 'what about the subjects in ece']
    match, score = process.extractOne(user_input.lower(), ece_subjects_phrases)
    if score >= 80:  # Adjust the similarity threshold as needed
        display_ece_subjects()
        continue

    # Check if the user wants to display answers
    if user_input.lower() == 'display answers':
        display_answers_content()
        continue

    if "how to impress a girl" in user_input.lower():
        print("ECHO: HAHA shakal dekh apni.")
        continue
    if user_input.lower() == 'send me the question papers':
        print("Echo: https://drive.google.com/file/d/1OU9HLhjZs55lQFdV2RGtWhm2qGeYMveC/view?usp=drivesdk\n ACA:https://drive.google.com/file/d/1OlN65T2k87-IyKBk2SLkpAqgxqDNIwOP/view?usp=drivesdk\n Signals and systems: https://drive.google.com/file/d/1OdT2sTaDbm0SXzsgGosKJwn71iAC5rgG/view?usp=drivesdk\n")
        continue

    # Get response from the model
    qa_response = qa_model(question=user_input, context=context)

    # Check confidence level before providing an answer
    confidence_threshold = 0.6  # Adjust as needed
    if qa_response['score'] >= confidence_threshold:
        # Print the answer
        print("ECHO:", qa_response['answer'])
    else:
        print("ECHO: I'm not sure about that. Can you ask another question?")